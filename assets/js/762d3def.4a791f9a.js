"use strict";(self.webpackChunkpine_docs=self.webpackChunkpine_docs||[]).push([[4186],{1194:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>a,contentTitle:()=>r,default:()=>h,frontMatter:()=>t,metadata:()=>l,toc:()=>c});var i=o(4848),s=o(8453);const t={sidebar_position:7},r="Logger",l={id:"Guide - Basics/logger",title:"Logger",description:"Pine has a custom logger but feel free to use whatever logger you would like. It supports both printing the console in color as well as writing to the log file.",source:"@site/docs/Guide - Basics/logger.md",sourceDirName:"Guide - Basics",slug:"/Guide - Basics/logger",permalink:"/docs/Guide - Basics/logger",draft:!1,unlisted:!1,editUrl:"https://github.com/BryanMwangi/pine-docs/blob/main/docs/Guide - Basics/logger.md",tags:[],version:"current",sidebarPosition:7,frontMatter:{sidebar_position:7},sidebar:"tutorialSidebar",previous:{title:"Cache",permalink:"/docs/Guide - Basics/cache"},next:{title:"WebSockets",permalink:"/docs/Guide - Basics/websockets"}},a={},c=[{value:"Init",id:"init",level:2},{value:"Methods",id:"methods",level:2},{value:"Info",id:"info",level:3},{value:"Error",id:"error",level:3},{value:"Warning",id:"warning",level:3},{value:"Success",id:"success",level:3}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"logger",children:"Logger"})}),"\n",(0,i.jsx)(n.p,{children:"Pine has a custom logger but feel free to use whatever logger you would like. It supports both printing the console in color as well as writing to the log file."}),"\n",(0,i.jsx)(n.p,{children:"If you have suggestions on how to improve the current implementation, do not hesitate."}),"\n",(0,i.jsx)(n.h2,{id:"init",children:"Init"}),"\n",(0,i.jsxs)(n.p,{children:["The init function takes in the name of the file you wish to store your logs in. It is recommended that your file name ends with ",(0,i.jsx)(n.code,{children:".log"})," file type e.g: ",(0,i.jsx)(n.code,{children:"server.log"}),". You also need to provide the max size of a the log input that can be put in the log. This avoids large entries from filling up the log file."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:"func Init(fileName string, maxSize int64)error\n\n"})}),"\n",(0,i.jsxs)(n.p,{children:["The default max size of an entry is ",(0,i.jsx)(n.code,{children:"100 * 1024 * 1024"})," bytes."]}),"\n",(0,i.jsx)(n.h2,{id:"methods",children:"Methods"}),"\n",(0,i.jsxs)(n.p,{children:["You can simply add to the log file by calling the standard ",(0,i.jsx)(n.code,{children:"log.Println"})," or ",(0,i.jsx)(n.code,{children:"log.Printf"}),", however, if would like to print out to the console and save to the log file at the same time, you can use the following methods."]}),"\n",(0,i.jsx)(n.h3,{id:"info",children:"Info"}),"\n",(0,i.jsx)(n.p,{children:"Prints out message to the console in a white color and saves to the log file."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:"func Info(message interface{})\n"})}),"\n",(0,i.jsx)(n.h3,{id:"error",children:"Error"}),"\n",(0,i.jsx)(n.p,{children:"Prints out message to the console in a red color and saves to the log file."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:"func Error(message interface{})\n"})}),"\n",(0,i.jsx)(n.h3,{id:"warning",children:"Warning"}),"\n",(0,i.jsx)(n.p,{children:"Prints out message to the console in a yellow color and saves to the log file."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:"func Warning(message interface{})\n"})}),"\n",(0,i.jsx)(n.h3,{id:"success",children:"Success"}),"\n",(0,i.jsx)(n.p,{children:"Prints out message to the console in a green color and saves to the log file."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:"func Success(message interface{})\n"})}),"\n",(0,i.jsxs)(n.p,{children:["If you would like to learn about printing to the console in color, you can have a look at our current implementation ",(0,i.jsx)(n.a,{href:"https://github.com/BryanMwangi/pine/blob/main/logger/logger.go",children:"here"})," or you can have a look at the package ",(0,i.jsx)(n.a,{href:"https://github.com/fatih/color",children:"github.com/fatih/color"})," package."]})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},8453:(e,n,o)=>{o.d(n,{R:()=>r,x:()=>l});var i=o(6540);const s={},t=i.createContext(s);function r(e){const n=i.useContext(t);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),i.createElement(t.Provider,{value:n},e.children)}}}]);