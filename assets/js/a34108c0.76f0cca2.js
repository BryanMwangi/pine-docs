"use strict";(self.webpackChunkpine_docs=self.webpackChunkpine_docs||[]).push([[4231],{1248:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>h,frontMatter:()=>s,metadata:()=>r,toc:()=>l});var i=o(4848),t=o(8453);const s={sidebar_position:5},a="Cookie",r={id:"Guide - Basics/cookie",title:"Cookie",description:"In this section, we will try and go into detail of how cookies are handled in Pine.",source:"@site/docs/Guide - Basics/cookie.md",sourceDirName:"Guide - Basics",slug:"/Guide - Basics/cookie",permalink:"/pine-docs/docs/Guide - Basics/cookie",draft:!1,unlisted:!1,editUrl:"https://github.com/BryanMwangi/pine-docs/blob/main/docs/Guide - Basics/cookie.md",tags:[],version:"current",sidebarPosition:5,frontMatter:{sidebar_position:5},sidebar:"tutorialSidebar",previous:{title:"Client",permalink:"/pine-docs/docs/Guide - Basics/client"},next:{title:"Cache",permalink:"/pine-docs/docs/Guide - Basics/cache"}},c={},l=[{value:"How to use",id:"how-to-use",level:2},{value:"Example",id:"example",level:2}];function d(e){const n={code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",...(0,t.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"cookie",children:"Cookie"})}),"\n",(0,i.jsx)(n.p,{children:"In this section, we will try and go into detail of how cookies are handled in Pine."}),"\n",(0,i.jsx)(n.p,{children:"Here is how the cookie struct looks like:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:'// cookie struct that defines the structure of a cookie\ntype Cookie struct {\n    //Name of the cookie\n    //\n    //Required field\n    Name string\n\n    //what data is stored in the cookie\n    //\n    //Required field\n    Value string\n\n    //determines the path in which the cookie is supposed to be used on\n    //you can set this to "/" so that every request will contain the cookie\n    Path string\n\n    //This allows the browser to associate your cookie with a specific domain\n    //when set to example.com cookies from example.com will always be sent\n    //with every request to example.com\n    Domain string\n\n    //Determines the specific time the cookie expires\n    //Max age is more prefered than expires\n    Expires time.Time\n\n    //Also sets the expiry date and you can use a string here instead\n    RawExpires string\n\n    //Max-Age field of the cookie determines how long the cookie\n    // stays in the browser before expiring\n    //if you want the cookies to expire immediately such as when a user logs out\n    //you can set this to -1\n    //\n    //accepts int value which should be the time in milliseconds you want\n    //the cookie to be stored in the browser\n    MaxAge int\n\n    //A boolean value that determines whether cookies will be sent over https\n    //or http only.\n    //\n    //Default is false and http can also send the cookies\n    Secure bool\n\n    //determines whether requests over http only can send the cookie\n    HttpOnly bool\n\n    //Cookies from the same domain can only be used on the specified domain\n    //Eg: cookies from app.example.com can only be used by app.example.com\n    //if you want all domains associated with example.com you can set this to\n    //*.example.com\n    //Now both app.example.com or dev.example.com can use the same cookie\n    //\n    //Options include the following:\n    // 0 - SameSite=Lax\n    // 1 - SameSite=Strict\n    // 2 - SameSite=None\n    //It will alwas default to Lax\n    SameSite SameSite\n\n    //All cookie data in string format. You do not need to set this\n    //Pine can handle it for you\n    Raw bool\n\n    //Pine will also take care of this\n    Unparsed []string\n}\n\n'})}),"\n",(0,i.jsx)(n.h2,{id:"how-to-use",children:"How to use"}),"\n",(0,i.jsx)(n.p,{children:"In a real world scenario, you would not need all these fields to simply set a cookie to the response instead, the main fields that most browsers would use are:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:"// cookie struct that defines the structure of a cookie\ntype Cookie struct {\n    Name string\n    Value string\n    Expires time.Time\n    Domain string\n    Secure bool\n    HttpOnly bool\n}\n"})}),"\n",(0,i.jsx)(n.h2,{id:"example",children:"Example"}),"\n",(0,i.jsx)(n.p,{children:"An example of how you could set a cookie in Pine is:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:'func main() {\n    // Create a new cookie\n\tapp := pine.New()\n\n    app.Get("/hello", func(c *pine.Ctx) error{\n        cookie := pine.Cookie{\n            Name: "session",\n            Value: data, // data can be a string such as a JWT token\n            Expires: time.Now().Add(time.Hour * 24 * 7),\n            Domain: "example.com",\n            Secure: true,\n            HttpOnly: true,\n        }\n        return c.SetCookie(cookie).SendString("Hello World")\n    })\n}\n'})}),"\n",(0,i.jsxs)(n.p,{children:["You can also use ",(0,i.jsx)(n.code,{children:"MaxAge"})," other than ",(0,i.jsx)(n.code,{children:"Expires"})," however, make sure to set it to unix time milliseconds such that"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:"// expires in 7 days\nexpires :=time.Now().Add(time.Hour * 24 * 7)\n\n// the same time but in unix milli will be 86400000 milliseconds from now\nmaxAge := 86400000\n\n// or\nmaxAge := time.Now().Add(time.Hour * 24 * 7).UnixMilli()\n"})})]})}function h(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},8453:(e,n,o)=>{o.d(n,{R:()=>a,x:()=>r});var i=o(6540);const t={},s=i.createContext(t);function a(e){const n=i.useContext(s);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:a(e.components),i.createElement(s.Provider,{value:n},e.children)}}}]);